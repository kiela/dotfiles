#!/usr/bin/env sh

set -euo pipefail

V=${V:-false}
CLEAR=${CLEAR:-true}

__debug() {
  if $V; then
    echo "DEBUG: $1"
  fi
}

__execute() {
  __debug "$1"
  eval "$1"
}

__install() {
  local _chart_name=$1
  local _args=$2

  __execute "helm dependency build"
  __execute "helm install $_chart_name . --namespace $_chart_name --create-namespace $args"
}

__upgrade() {
  local _chart_name=$1
  local _args=$2

  __execute "helm dependency update"
  __execute "helm upgrade $_chart_name . --namespace $_chart_name --create-namespace $args"
}

__uninstall() {
  local _chart_name=$1
  local _delete_namespace=false
  local _resource_count

  __execute "helm delete $_chart_name"

  echo "Removing chart $_chart_name objects."

  while true; do
    _resource_count=$(kubectl get all -n "$_chart_name" --ignore-not-found | wc -l)

    if [[ $_resource_count -gt 0 ]]; then
      sleep 5
      echo "Still removing chart $_chart_name objects..."
    else
      echo "Chart $_chart_name objects have been removed."

      while true; do
        read -p "Do you want to remove $_chart_name namespace? (y/n) " _yn

        case $_yn in
          [Yy]* ) _delete_namespace=true; break;; # break out from the second loop
          [Nn]* ) break;; # break out from the second loop
          * ) echo "Please answer yes (Y/y) or no (N/n).";;
        esac
      done

      if [[ "$_delete_namespace" == true ]]; then
        __execute "kubectl delete namespace $_chart_name"
      else
        echo "Namespace $_chart_name is not removed."
      fi

      break # break out from the first loop
    fi
  done
}

__template_render() {
  local _output_dir=$1
  local _args=${@:2}

  if [[ -z $output_dir ]]; then
    echo "No output dir passed..."
    exit 1
  fi

  if $CLEAR; then
    __execute "rm -rf Chart.lock charts $_output_dir"
  fi

  __execute "helm repo update"
  __execute "helm template \
        --debug \
        --dependency-update \
        --output-dir $_output_dir \
        -f values.yaml $_args ."
}

__help() {
  echo "$0 install|upgrade|uninstall|render|help <args>"
}

option=${1:-}

if [ -z "$option" ]; then
  __help
  exit 1
fi

shift

chart_name=$(basename "$(pwd)")
args="$@"

case $option in
  i|install)
    __install $chart_name "$args"
    ;;
  up|upgrade)
    __upgrade $chart_name "$args"
    ;;
  un|uninstall)
    __uninstall $chart_name
    ;;
  r|render)
    output_dir=$1
    args="${@:2}"
    __template_render $output_dir $args
    ;;
  *)
    __help
    ;;
esac
